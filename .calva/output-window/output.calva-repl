; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Connecting ...
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉user꞉> 
#'user/memory-db
clj꞉user꞉> 
#'user/read-db
clj꞉user꞉> 
#'user/write-db
clj꞉user꞉> 
#'user/create-table
clj꞉user꞉> 
#'user/drop-table
clj꞉user꞉> 
#'user/insert
clj꞉user꞉> 
#'user/select-*
clj꞉user꞉> 
#'user/select-*-where
clj꞉user꞉> 
{:fruits {:data [], :indexes {}}}
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3}], :indexes {:name {"Pear" 0}}}}
clj꞉user꞉> 
[{:name "Pear", :stock 3}]
clj꞉user꞉> 
{:name "Pear", :stock 3}
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3}], :indexes {:name {"Pear" 0}}}}
clj꞉user꞉> 
{:name "Pear", :stock 3}
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3} {:name "Apricot", :stock 30}], :indexes {:name {"Pear" 0, "Apricot" 1}}}}
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3} {:name "Apricot", :stock 30} {:name "Apricot", :stock 30}], :indexes {:name {"Pear" 0, "Apricot" 2}}}}
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3} {:name "Apricot", :stock 30} {:name "Apricot", :stock 30} {:name "Grapefruit", :stock 6}], :indexes {:name {"Pear" 0, "Apricot" 2, "Grapefruit" 3}}}}
clj꞉user꞉> 
{:name "Apricot", :stock 30}
clj꞉user꞉> 
[{:name "Pear", :stock 3} {:name "Apricot", :stock 30} {:name "Apricot", :stock 30} {:name "Grapefruit", :stock 6}]
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3} {:name "Apricot", :stock 30} {:name "Apricot", :stock 30} {:name "Grapefruit", :stock 6} {:name "Pear", :stock 3}], :indexes {:name {"Pear" 4, "Apricot" 2, "Grapefruit" 3}}}}
clj꞉user꞉> 
{}
clj꞉user꞉> 
nil
clj꞉user꞉> 
; Syntax error compiling at (d:\Code\compilers\the clojure workshop\chap02\act02.01.clj:0:0).
; Unable to resolve symbol: exists in this context
clj꞉user꞉> 
nil
clj꞉user꞉> 
nil
clj꞉user꞉> 
nil
clj꞉user꞉> 
nil
clj꞉user꞉> 
nil
clj꞉user꞉> 
-------------------------
clojure.core/println
([& more])
  Same as print followed by (newline)
nil
clj꞉user꞉> 
{}
clj꞉user꞉> 
{:fruits {:data [], :indexes {}}}
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3}], :indexes {:name {"Pear" 0}}}}
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3} {:name "Apricot", :stock 30}], :indexes {:name {"Pear" 0, "Apricot" 1}}}}
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3} {:name "Apricot", :stock 30} {:name "Grapefruit", :stock 6}], :indexes {:name {"Pear" 0, "Apricot" 1, "Grapefruit" 2}}}}
clj꞉user꞉> 
[{:name "Pear", :stock 3} {:name "Apricot", :stock 30} {:name "Grapefruit", :stock 6}]
clj꞉user꞉> 
{:name "Apricot", :stock 30}
clj꞉user꞉> 
nil
clj꞉user꞉> 
; Syntax error compiling if at (d:\Code\compilers\the clojure workshop\chap02\act02.01.clj:22:5).
; Too many arguments to if
clj꞉user꞉> 
#'user/select-*-where
clj꞉user꞉> 
; Syntax error compiling if at (d:\Code\compilers\the clojure workshop\chap02\act02.01.clj:34:5).
; Too many arguments to if
clj꞉user꞉> 
; Syntax error (ArityException) compiling nil? at (d:\Code\compilers\the clojure workshop\chap02\act02.01.clj:34:5).
; Wrong number of args (4) passed to: clojure.core/nil?--inliner--5444
clj꞉user꞉> 
; Syntax error compiling if at (d:\Code\compilers\the clojure workshop\chap02\act02.01.clj:34:5).
; Too many arguments to if
clj꞉user꞉> 
#'user/insert
clj꞉user꞉> 
{}
clj꞉user꞉> 
{:fruits {:data [], :indexes {}}}
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3}], :indexes {:name {"Pear" 0}}}}
clj꞉user꞉> 
Record with  :name   Pear  already exists. Aborting...
nil
clj꞉user꞉> 
{}
clj꞉user꞉> 
#'user/insert
clj꞉user꞉> 
{:fruits {:data ({:name "Pear", :stock 3}), :indexes {:name {"Pear" 0}}}}
clj꞉user꞉> 
{:fruits {:data ({:name "Pear", :stock 3} {:name "Pear", :stock 3}), :indexes {:name {"Pear" 1}}}}
clj꞉user꞉> 
{:fruits {:data ({:name "Pear", :stock 3} {:name "Pear", :stock 3} {:name "Pear", :stock 3}), :indexes {:name {"Pear" 2}}}}
clj꞉user꞉> 
{:fruits {:data ({:name "Pear", :stock 3} {:name "Pear", :stock 3} {:name "Pear", :stock 3} {:name "Pear", :stock 3}), :indexes {:name {"Pear" 3}}}}
clj꞉user꞉> 
{}
clj꞉user꞉> 
{:fruits {:data [], :indexes {}}}
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3}], :indexes {:name {"Pear" 0}}}}
clj꞉user꞉> 
Record with :name Pear already exists. Aborting...
nil
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3} {:name "Apricot", :stock 30}], :indexes {:name {"Pear" 0, "Apricot" 1}}}}
clj꞉user꞉> 
Record with :name Apricot already exists. Aborting...
nil
clj꞉user꞉> 
Record with :name Pear already exists. Aborting...
nil
clj꞉user꞉> 
{:fruits {:data [{:name "Pear", :stock 3} {:name "Apricot", :stock 30} {:name "Grapefruit", :stock 6}], :indexes {:name {"Pear" 0, "Apricot" 1, "Grapefruit" 2}}}}
clj꞉user꞉> 
Record with :name Grapefruit already exists. Aborting...
nil
clj꞉user꞉> 
Record with :name Apricot already exists. Aborting...
nil
clj꞉user꞉> 
Record with :name Pear already exists. Aborting...
nil
clj꞉user꞉> 
[{:name "Pear", :stock 3} {:name "Apricot", :stock 30} {:name "Grapefruit", :stock 6}]
clj꞉user꞉> 
nil
clj꞉user꞉> 
{:name "Apricot", :stock 30}
clj꞉user꞉> 
-------------------------
clojure.core/println
([& more])
  Same as print followed by (newline)
nil
clj꞉user꞉> 
